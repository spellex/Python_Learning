# -*- coding: utf-8 -*-
'''
Задание 12.2


Функция check_ip_addresses из задания 12.1 принимает только список адресов,
но было бы удобно иметь возможность указывать адреса с помощью диапазона, например, 192.168.100.1-10.

В этом задании необходимо создать функцию convert_ranges_to_ip_list,
которая конвертирует список IP-адресов в разных форматах в список, где каждый IP-адрес указан отдельно.

Функция ожидает как аргумент список IP-адресов и/или диапазонов IP-адресов.

Элементы списка могут быть в формате:
* 10.1.1.1
* 10.1.1.1-10.1.1.10
* 10.1.1.1-10

Если адрес указан в виде диапазона, надо развернуть диапазон в отдельные адреса, включая последний адрес диапазона.
Для упрощения задачи, можно считать, что в диапазоне всегда меняется только последний октет адреса.

Функция возвращает список IP-адресов.


Например, если передать функции convert_ranges_to_ip_list такой список:
['8.8.4.4', '1.1.1.1-3', '172.21.41.128-172.21.41.132']

Функция должна вернуть такой список:
['8.8.4.4', '1.1.1.1', '1.1.1.2', '1.1.1.3', '172.21.41.128',
 '172.21.41.129', '172.21.41.130', '172.21.41.131', '172.21.41.132']

'''

import ipaddress
from pprint import pprint

ip_list = ['8.8.4.4', '1.1.1.1-3', '172.21.41.128-172.21.41.132']


def convert_ranges_to_ip_list(ip_def):
    true_ip_list = []

    def check_ip(ip_def2):
        try:
            ipaddress.ip_address(ip_def2)
        except ValueError:
            return False
        else:
            return True

    for ip in ip_def:
        if check_ip(ip):
            true_ip_list.append(ip)

        else:
            ip = ip.split('-')
            a = []
            b = []
            if len(ip[-1]) == 1:
                a = ip[-2].split('.')
                for x in range(int(a[-1]), (int(ip[-1])+1)):
                    true_ip_list.append('{0}.{1}.{2}.{3}'.format(int(a[0]), int(a[1]), int(a[2]), int(x)))
            else:
                b = ip[-1].split('.')
                a = ip[-2].split('.')
                for x in range(int(a[-1]), (int(b[-1])+1)):
                    true_ip_list.append('{0}.{1}.{2}.{3}'.format(int(a[0]), int(a[1]), int(a[2]), int(x)))

    return true_ip_list


pprint(convert_ranges_to_ip_list(ip_list))
